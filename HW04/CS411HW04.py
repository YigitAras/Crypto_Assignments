#!/home/yigitaras/anaconda3/bin/python3
import math

def phi(n):
    amount = 0
    for k in range(1, n + 1):
        if math.gcd(n, k) == 1:
            amount += 1
    return amount

def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
    gcd = b
    return gcd, x, y
def modinv(a, m):
    gcd, x, y = egcd(a, m)
    if gcd != 1:
         return None  # modular inverse does not exist
    else:
        return x % m

def Question1():
    print("QUETION 1 PART A:")
    print("Double encryption is essentially creating a new e_3 such that;")
    print("e_3 = e_1 x e_2 mod phi(N) in the exponent of the m")
    print("We will essentially need only 1 key to decrypt this so it is equivalent to a single encryption")
    print("=========================================")
    print("\n")
    print("QUESTION 1 PART B:")

    p= 141835939825390252764096251296889926668359910135028926302756081969382419306828550195963181625639680831323573550644713989824522733217099494058212794014637460446899839894488102299115774948210939925643653783376724832757021374866478685754322271634575306573376980239709772996679131763521035516371654212107560201638129391999477382014454151280719516727794975492514523194687537884392035206814586388435115823835217334406707311356421125493841840637466774217176883392644241
    q=1870909817348574776843586968705575114122498232680700397694236637759726958886012397346968952881705202945812512066060207771214302638382713349288318538891293144922908739243622342570799947463308017416435216548077562362397005552780647478757185683356370358867724766107833383762231460053992020096152475647982945152834135468787268341000829539390053923786764696648299458963323368450414262722979462961878236773156864761787972455259056294622868929026130468606169539843611377

    c=132418702425423073777085414800616440851535605554110679041014893035593675222764834357724596581012865280814579400767602917331925832544139943910999173666888844952947870049991682935538005620100971916073085156006744133364487417840007890542301352266293555639856605159828299284347310328154234485888907341486140144875294487133327631013383856272953788091044870731583376141716240291500444463958579574252585864164612416191869770027201819017807319828396312230012806801506524552647649696466938384037363569606482426791535756831431388213705269794369882745933595172968385071487858655147464573490694879453007560373020039109688711352030500218835536008867703664438950156090934547603581054087059451378117412112100627395431603438102110658234251718456982044045378911872956802290388568039727764184762915468345768326137660334048400779253736836335694612775315931449114477403331009389597949717181673922794832788452971433825569876412852634359752500824
    
    e1 = 65537
    e2 = 65539
    phi = (p-1) * (q-1)
    e3 =(e1*e2)%phi
    d  = modinv(e3,phi)
    
    ans = pow(c,d,p*q)
    print("The decryption key is: ")
    print(d)
    print("The plain text is : ")
    print(ans)
    print("********************************************************************************************************************************")
    print("\n")

def Question2():
    n = 714571713162202092272955137767086240882668961184348597184439235288408772692251694837718145118717594545621355673492084576135110681472618577930028389154228063519747648290256163222020884210950864671765766990303466942950161801168928509879964400252399669129013392785573206404838399661600614596523768686004444188623666513562216842716728559991830324096253530716200994895368663978416444601118619767468120400607466774270186158970714783391622824888107937358835570933044833191386668810492591943580643104837602699420654455196045484202999591490702219219889639045765515895564407922991232470430292413787309180060814410114753545901848995015119555480934926018712089716056198015264391194209782871704725453116815206699137136659517674479589025136763492800343840891136138555949132487879706651424500119552331640934835084454085039706512869260688767439146528890712539913057947105583288492134430055260380533894556380708695954537874483810350723597689
    c = 250773635710052278605730576879719083813016843933393954410974590095347210268261979284871481266280530180015597800576967603393483520667734940449571662501231003258036757264030905567694193601721483872838924580274942401120095047709580118453780854162647627072644243268611464986259534522308147163675976396838863948356780016467832477644910042203810422051578577322307909155791432792250332128552259236838919951809062131285925084854587122171960163095761187103032889235680687739641816396615446947476905489816488917316897754250479074701129728602290187306796930898784367541944968955251856174337982597222008100616799670798205008314965884262958519151901779973578850797493540321261555261598522224388052105530594681181877454288370770977548390057242258900498604362913977086846888924086314033715939415403608077066462644932238173847696283111133721977553324644821331801533749554198884979452161385511821067619412540610066787461179470690850233337234
    e = 65537
    for i in range(0,10000):
        ciph = pow(i,e,n)
        if ciph == c:
            print(" QUESTION 2:")
            print("The pin is: ",i)
            break
    print("******************************************************************************************************************************")
    print("\n")

def Question3():
    print("QUESTION 3 PART A: ")
    print("Since GCD(C_p,N)=P and GCD(C_q,N) = Q")
    print("If someone has C_p or C_q they can factor N easily since their GCD will give away the P or Q")
    print("=================================================================")
    print("QUESTION 3 PART B: ")

    c_p = 3873680249623467826367539364615622589341354860958676387978659380263546197984522526560815271059808890968051330871282433149509587198357995235098402597562394532942248440785823812744245775541457429705400656431200565210880345454073114392081573852975647397894188392554441729200872482027630124098341536309658821020887879754305515982200459718246770965592051443891902975413068576099241022023087113547866192282458339642152774673429640500380196758464923112739607056897968627591289881579460166394238775676402099831162820645802017259999853129954464949014713129189051795007415064128397315657343793939830810688657224114493477678984
    n= 11034161487924008937888796288635594662305126611335525532797034697845509223571277728323048152953068310859531889586217296715035312600843481743618690136264262700496164000119632383307688421790374437199120749531557591772271826954626172921932880153434766388699019537547728601006133987955409466414998624572957814418671716173114423991630349679058041627982381923256451621799559969296055454582455483052696861907245917938633986768518699318279981766966170781110844132095633681139589567818310285671505684210661452328098494053325629231247961415770546673634839221164242922757395108801581855418166879733623567828470384034830029933687
    e = 65537

    (p,x,y) = egcd(c_p,n)
    q = n//p
    print("P is: ")
    print(p)
    print("Q is: ")
    print(int(q))
    print("******************************************************************************************************************************")
    print("\n")




def Question4():
    N = 23124752709251540295223539055016666725519601394190204936103033967567276224025662041534523470246937716961480559493778461696574824923340085781705881751570255975900445559082241203063291835145055796205057093550855306437863389066188627462544312375990109352334335874008716880331678233401564155505910465753100406564178916841352650197056389559038346622739216663865604505142571364848697449955069616209697614852890166730123027707685297231354669197791508969525274191100891965790466719859932546832164265170369079603805036992279714716390445589229552360989684144040664241776778327614775651192621096636616220650411868182114652457903
    c = 8734659822721641572997882019370332335754088242287506123413141824636579711861911122559911243821208648919998870271481805807195676522007042383597077387350888827809721745517013079890310771413411300282654051777387065399841579857645963686536427704857085369358882263810610803716262096259470210170122824517677151815056611375980601348614007177962717097262476987470133209242083752986356354192197377425848020117043177942787935086083713272608157596492522688233352832483968858542996223259366594003019616667987320520808122366411936602071613089597905106106481490128173998715530322419741271162082071029014084003433689301527649902114
    e = 65537

    c_prime = (pow(c,e,N)*c)%N
    print("QUESTION 4 PART A: ")
    print("Since querying the Oracle will return the thing you sent raised to the power D")
    print("Where D is the secret key that is the inverse of E in mod  PHI of N")
    print("We can encrypt our C again and multiply it with C")
    print("Which will in return make us have M with a power of (E^2+E)")
    print("So when we query that we will have that raised to the power of D")
    print("Which will make the power to be E+1")
    print("And that is having C*M, so we can divide it by C and recieve the M")
    print("=============================================================")
    print("\n")
    print("QUESTION 4 PART B: ")
    q_return = 7428607146497433609505283650163013337741792973676882990193302624849894652653852476193849245277861822008609596341012911736720236396210844701400420151229533662961183477146051545905141990815374305472871741365826725504840928196223445453261576765308330476251427528286544053212149587312739231349132130606061900215053242072611679039479300606066916937311838959924084159040007507053306257447091809997167969297594494831561688585381946179878107531927513303643014389744039623644646435626272145760169416596823233690652773240799198566761547514970970936025598100564402497512807301434779242971161897522388274004351523691413401106540
    M = (q_return* modinv(c,N)) % N
    print("M is: ")
    print(M)

# QUESTION 1 ANSWER
Question1()
# QUESTION 2 ANSWER
Question2()
# QUESTION 3 ANSWER
Question3()
# QUESTION 4 ANSWER
Question4()
